---
description: 
globs: 
alwaysApply: true
---

    You are an expert full-stack developer proficient in TypeScript, React, Next.js app router, and modern UI/UX frameworks (e.g., Tailwind CSS, Hero UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

    ### Objective
    - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.

    ### Code Style and Structure
    - Write concise, technical TypeScript code with accurate examples.
    - Use functional and declarative programming patterns; avoid classes.
    - Favor iteration and modularization over code duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
    - Structure files with exported components, subcomponents, helpers, static content, and types.
    - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).

    ### Optimization and Best Practices
    - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.
    - Implement dynamic imports for code splitting and optimization.
    - Use responsive design with a mobile-first approach.
    - Optimize images: use WebP format, include size data, implement lazy loading.

    ### Error Handling and Validation
    - Prioritize error handling and edge cases:
      - Use early returns for error conditions.
      - Implement guard clauses to handle preconditions and invalid states early.
      - Use custom error types for consistent error handling.

    ### UI and Styling
    - Use modern UI frameworks (e.g., Tailwind CSS, Hero UI library and cli) for styling.
    - Implement consistent design and responsive patterns across platforms.

    ### State Management and Data Fetching
    - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
    - Implement validation using Zod for schema validation.

    ### Security and Performance
    - Implement proper error handling, user input validation, and secure coding practices.
    - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

    ### Methodology
    1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
    2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
    3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.

    **Process**:
    1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
    2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.
    3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
    4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.
    5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.

    # Shop API Client Documentation

This directory contains the GraphQL client setup for connecting to the Vendure JS API. The client is built using Graffle and provides type-safe GraphQL operations.

    ### API Client
      The shop API client is already configured with:
      - Authentication token handling
      - Locale support
      - Automatic cookie management for auth tokens
      - Type-safe GraphQL operations

    ### Usage

    ### Basic Query Example
      ```typescript
      import { shopClient } from './shopClient';

      // Example query
      const result = await shopClient.query({
        products: {
          items: {
            id: true,
            name: true,
            description: true,
            // Add more fields as needed
          }
        }
      });
      ```




    ### Basic Mutation Example

      ```typescript
      import { shopClient } from './shopClient';

      // Example mutation
      const result = await shopClient.mutation({
        addItemToOrder: {
          id: true,
          total: true,
          // Add more fields as needed
        }
      });
      ```

## Features

1. **Authentication**
   - Automatic token handling through cookies
   - Token refresh on API responses
   - Secure token storage

2. **Internationalization**
   - Automatic locale handling
   - Language code support in API requests

3. **Type Safety**
   - Full TypeScript support
   - Generated types for all GraphQL operations
   - Autocomplete for available fields

4. **Error Handling**
   - Built-in error types
   - GraphQL error handling

## Configuration

The client is configured in `shopClient.ts` with the following features:
- Credentials inclusion for cross-origin requests
- Automatic auth token management
- Locale support
- Custom fetcher implementation

## Available Operations

The client supports all Vendure GraphQL operations including:
- Queries (products, orders, customers, etc.)
- Mutations (add to cart, checkout, etc.)
- Subscriptions (real-time updates)

## Best Practices

1. Always use the type-safe query/mutation builders
2. Handle errors appropriately using try/catch
3. Use the provided auth token management
4. Include necessary fields in your queries to avoid over-fetching


### TanStack Query Integration

The shop API client is designed to work seamlessly with TanStack Query for client-side data fetching and caching. Here's how to use it:

```typescript
import { useQuery, useMutation } from '@tanstack/react-query';
import { shopClient } from './shopClient';

// Example query hook
const useProducts = (options?: ProductListOptions) => {
  return useQuery({
    queryKey: ['products', options],
    queryFn: () => shopClient.query({
      products: {
        items: {
          id: true,
          name: true,
          description: true,
        }
      }
    })
  });
};

// Example mutation hook
const useAddToCart = () => {
  return useMutation({
    mutationFn: (variables: { productVariantId: string; quantity: number }) => 
      shopClient.mutation({
        addItemToOrder: {
          id: true,
          total: true,
        }
      })
  });
};
```

### URL State Management with nuqs

For managing search parameters and URL state, we use nuqs which provides a type-safe way to handle URL state both on the server and client side:

```typescript
import { useQueryState } from 'nuqs';

// Client-side usage
const [searchQuery, setSearchQuery] = useQueryState('q');
const [page, setPage] = useQueryState('page', { defaultValue: '1' });

// Server-side usage
import { parseAsString } from 'nuqs/server';

export default async function Page({ searchParams }: { searchParams: { q?: string } }) {
  const query = parseAsString.withDefault('').parseServerSide(searchParams.q);
  // Use the query parameter in your server component
}
```

Key features:
- Type-safe URL state management
- Automatic serialization/deserialization
- Server-side and client-side support
- Built-in validation and parsing
- SEO-friendly URL state

## Environment Variables

The client requires the following environment variable:
- `VENDURE_API_URL`: The URL of your Vendure API endpoint
    